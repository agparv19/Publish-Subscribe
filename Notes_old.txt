1. A class of PSSP //Publish-Subscribe Social Platform
	-unordered_map<int, text> mp_text //Use a map to get the text given its text_id
	-unordered_map<int, user> mp_user //Use a map to get the user given its user_id

2. A class for text
	-int text_id
	-string text
	-int time_posted
	-int uid //posted by the user uid
	-int type // 0-New, 1-REPOST, 2-REPLY
	-int repId // id of the text, to which this text is a reply. -1 if this text is not a reply in first place
	
3. A class for user
	-int user_id
	-set<text> post //collection of all posts this user has made, sorted with post time
	-set<user> publishers //collection of all users this user is subscribed to, sorted with pid
	-set<text> unseen_rep //collection of all unseen replies of this user, sorted with post time
	-int told //last time this user performed read action
	
	
SUBSCRIBE,t,uid,pid
	-Create users uid and pid if they dont exist
	-Add pid to publishers of uid
	-O(logn) time
	
	
UNSUBSCRIBE,t,uid,pid
	-If pid or uid does not exist, or pid is already not in publishers of uid, throw exception 
	-Otherwise remove pid from publishers of uid
	-O(logn) time, n = no. of publishers this user is subscribed to
	
PUBLISH,t,uid,NEW,text,tid
	-Create a text object with above details
	-Add text object to PSSP
	-Add text to 'post' of this user
	-O(logn) time, n = no. of posts by this user
	
PUBLISH,t,uid,REPOST(ptid),tid
	-Retrieve string (text) corresponding to ptid
	-Create a text object with above details
	-Add text object to PSSP
	-Add text to 'post' of this user
	-O(logn) time, n = no. of posts by this user
	
PUBLISH,t,uid,REPLY(ptid),text,tid
	-Retrieve the user u who posted the text with id ptid
	-Create a text object with above details
	-Add text to 'post' of this user (uid)
	-Add this text object to unseen_rep of user u
	-O(logn) time, n = max(no. of posts by this user, no. of unseen replies of u)
	
READ,t,uid
	-Retrieve the user u corresponding to id uid
	-Create a priority_queue pq that will store all the texts to be printed on screen //min heap, earliest time will be printed first
	-Scan unseen_rep, add all the replies that are after told and before t to pq, and remove them from unseen rep
	-Scan all the publishers, for every publisher check the new posts, add all the posts after told and before t to pq
	-Use Binary Search to find the earliest post after told in 'post' of every publisher (lower/upper bound in set)
	-O(n+p), n for total number of posts this user will see, p for number of publishers this user is subscribed to
	-You will spend n1 (+logn to binary search) time at publisher p1, if p1 has n1 new posts. Will do this for every user in 'publishers' 
	
